# -*- coding: utf-8 -*-
"""dataset cultivo.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Te6fGM83oKeAK-xSL7OHdRphb3DCXz04

#An√°lisis de un cultivo de moscas en el champi√±√≥n
"""

# Importar librer√≠as necesarias
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier, DecisionTreeRegressor
from sklearn.metrics import accuracy_score, mean_squared_error
import matplotlib.pyplot as plt
from sklearn import tree

# Cargar el dataset (cambiar la ruta si es necesario)
file_path = "Adult_phorids_CIES_IRTA.csv"
df = pd.read_csv(file_path, sep=";")

# üîπ PREPROCESAMIENTO üîπ
# Convertir 'occurenceStatus' a valores num√©ricos (0 = Absent, 1 = Present)
df["occurenceStatus"] = df["occurenceStatus"].map({"absent": 0, "present": 1})

# Convertir 'Value' a n√∫mero y manejar nulos
df["Value"] = pd.to_numeric(df["Value"], errors="coerce")
df.dropna(inplace=True)

# Seleccionar variables predictoras y objetivo
X = df[["Farm", "Season", "Growin stage", "Location"]]
y_status = df["occurenceStatus"]
y_value = df["Value"]

# Dividir datos en entrenamiento y prueba
X_train, X_test, y_train_status, y_test_status = train_test_split(X, y_status, test_size=0.2, random_state=42)
X_train, X_test, y_train_value, y_test_value = train_test_split(X, y_value, test_size=0.2, random_state=42)

# üîπ √ÅRBOL DE DECISI√ìN PARA PRESENCIA DE MOSCAS üîπ
clf = DecisionTreeClassifier(max_depth=4, random_state=42)
clf.fit(X_train, y_train_status)

# Predicci√≥n y evaluaci√≥n
y_pred_status = clf.predict(X_test)
accuracy = accuracy_score(y_test_status, y_pred_status)
print(f"Precisi√≥n del √°rbol de decisi√≥n (presencia de moscas): {accuracy:.2f}")

# Visualizar el √°rbol
plt.figure(figsize=(10, 6))
tree.plot_tree(clf, feature_names=X.columns, class_names=["Absent", "Present"], filled=True)
plt.show()

# üîπ REGRESI√ìN PARA IMPACTO üîπ
reg = DecisionTreeRegressor(max_depth=4, random_state=42)
reg.fit(X_train, y_train_value)

# Predicci√≥n y evaluaci√≥n
y_pred_value = reg.predict(X_test)
mse = mean_squared_error(y_test_value, y_pred_value)
print(f"Error cuadr√°tico medio (predicci√≥n de impacto): {mse:.2f}")

# Visualizar el √°rbol de regresi√≥n
plt.figure(figsize=(20, 4))
tree.plot_tree(reg, feature_names=X.columns, filled=True)
plt.show()

"""#Modelo de regresion"""

from sklearn.tree import DecisionTreeRegressor
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt
from sklearn import tree

# Definir las variables predictoras y la variable objetivo
X = df[["Farm", "Season", "Growin stage", "Location"]]
y_value = df["Value"]

# Dividir datos en entrenamiento y prueba
X_train, X_test, y_train_value, y_test_value = train_test_split(X, y_value, test_size=0.2, random_state=42)

# Crear y entrenar el modelo de regresi√≥n
reg = DecisionTreeRegressor(max_depth=4, random_state=42)
reg.fit(X_train, y_train_value)

# Hacer predicciones
y_pred_value = reg.predict(X_test)

# Evaluar el modelo
mse = mean_squared_error(y_test_value, y_pred_value)
print(f"Error cuadr√°tico medio (predicci√≥n de impacto): {mse:.2f}")

# Visualizar el √°rbol de regresi√≥n
plt.figure(figsize=(12, 6))
tree.plot_tree(reg, feature_names=X.columns, filled=True)
plt.show()

"""##Precisi√≥n en porcentaje y las m√©tricas adicionales"""

# Importar librer√≠as necesarias
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, classification_report

# Cargar el dataset (aseg√∫rate de cargarlo correctamente en Colab)
df = pd.read_csv("Adult_phorids_CIES_IRTA.csv", delimiter=";")

# Convertir la variable objetivo a valores num√©ricos (1 = presente, 0 = ausente)
df['occurenceStatus'] = df['occurenceStatus'].apply(lambda x: 1 if x == 'present' else 0)

# Seleccionar las variables predictoras y la variable objetivo
X = df[['Farm', 'Season', 'Growin stage', 'Location']]
y = df['occurenceStatus']

# Dividir en datos de entrenamiento y prueba
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Crear y entrenar el modelo de √Årbol de Decisi√≥n
model = DecisionTreeClassifier()
model.fit(X_train, y_train)

# Hacer predicciones
y_pred = model.predict(X_test)

# Calcular precisi√≥n en porcentaje
accuracy = accuracy_score(y_test, y_pred)
print(f"Precisi√≥n del modelo: {accuracy * 100:.2f}%")

# Mostrar m√©tricas adicionales (Precision, Recall, F1-score)
print("\nReporte de clasificaci√≥n:")
print(classification_report(y_test, y_pred))

"""##Gr√°ficas

###Matriz de confusi√≥n
"""

import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import confusion_matrix

# Crear matriz de confusi√≥n
cm = confusion_matrix(y_test, y_pred)

# Graficar la matriz de confusi√≥n
plt.figure(figsize=(6, 4))
sns.heatmap(cm, annot=True, fmt="d", cmap="Blues", xticklabels=["Ausente", "Presente"], yticklabels=["Ausente", "Presente"])
plt.xlabel("Predicci√≥n")
plt.ylabel("Valor real")
plt.title("Matriz de Confusi√≥n")
plt.show()

"""La matriz de confusi√≥n es una tabla que muestra cu√°ntas predicciones fueron correctas o incorrectas en cada categor√≠a. Se interpreta as√≠:

	Predicho: Ausente	Predicho: Presente
Real: Ausente	Verdaderos Negativos (TN) ‚úÖ

Falsos Positivos (FP) ‚ùå

Real: Presente	Falsos Negativos (FN) ‚ùå

Verdaderos Positivos (TP) ‚úÖ

Valores altos en la diagonal (TN y TP) ‚Üí El modelo est√° acertando bien.

üîπ Valores altos fuera de la diagonal (FP y FN) ‚Üí El modelo est√° cometiendo errores.

üîπ Muchos Falsos Positivos (FP) ‚Üí Est√° detectando moscas donde no hay.

üîπ Muchos Falsos Negativos (FN) ‚Üí Est√° fallando al detectar moscas reales.

###Distribuci√≥n de la Presencia de Moscas
"""

plt.figure(figsize=(6, 4))
sns.countplot(x=df['occurenceStatus'], palette="pastel")
plt.xticks(ticks=[0,1], labels=["Ausente", "Presente"])
plt.title("Distribuci√≥n de la Presencia de Moscas")
plt.xlabel("Estado")
plt.ylabel("Frecuencia")
plt.show()

"""Este gr√°fico de barras muestra cu√°ntas veces se registraron cultivos con moscas ("Presente") y sin moscas ("Ausente") en el dataset.

üîπ Si hay muchos m√°s casos de "Ausente" que "Presente", el dataset est√° desequilibrado, lo que puede afectar al modelo.
üîπ Si los valores est√°n balanceados, el modelo tendr√° datos m√°s equitativos para aprender.

###Importancia de las Variables en el Modelo
"""

# Obtener importancia de las variables
importances = model.feature_importances_
features = X.columns

# Graficar la importancia de cada variable
plt.figure(figsize=(6, 4))
sns.barplot(x=importances, y=features, palette="viridis")
plt.title("Importancia de las Variables en el Modelo")
plt.xlabel("Importancia")
plt.ylabel("Caracter√≠sticas")
plt.show()

"""Muestra qu√© variables son m√°s importantes para el modelo a la hora de predecir la presencia de moscas.

üîπ Variables con valores altos ‚Üí Son las m√°s influyentes en la predicci√≥n.

üîπ Variables con valores bajos ‚Üí Apenas afectan la decisi√≥n del modelo.

üîπ Si la variable "Ubicaci√≥n" tiene alta importancia ‚Üí La zona influye en la aparici√≥n de moscas.

üîπ Si la variable "Etapa de crecimiento" tiene alta importancia ‚Üí Ciertas etapas favorecen la presencia de moscas.
"""

